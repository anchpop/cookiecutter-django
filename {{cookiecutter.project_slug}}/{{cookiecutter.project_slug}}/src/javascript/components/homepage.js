import React from 'react';
import PropTypes from 'prop-types';
import Button from '@material-ui/core/Button';
import AppBar from '@material-ui/core/AppBar';
import Toolbar from '@material-ui/core/Toolbar';
import Typography from '@material-ui/core/Typography';
import Grid from '@material-ui/core/Grid';
import { withStyles } from '@material-ui/core/styles';
import { Link } from 'react-router-dom';
import Paper from '@material-ui/core/Paper';
import { connect } from 'react-redux';

import RandomNumberCard from './randomNumberCard';
import { nonce } from '../actions';
import TopBar from "./topBar"


const styles = theme => ({
  root: {
    flex: 1
  },
  code: {
    display: 'inline',
    wordBreak: 'break-all',
    fontWeight: 'bold'
  },
  cardRoot: {
    ...theme.mixins.gutters(),
    paddingTop: theme.spacing.unit * 2,
    paddingBottom: theme.spacing.unit * 2,
    margin: 20,
  },
  paper: {
    height: 140,
    width: 100
  },
  control: {
    padding: theme.spacing.unit * 2
  }
});

function Homepage(props) {
  const { classes } = props;  
  return (
    <div>
      <TopBar />
      <Grid container className={classes.root} spacing={16} justify="center">
        <Grid item xs={12} sm={8} md={6} >
            <Paper className={classes.cardRoot} elevation={1}>
              <Typography variant="headline" component="h3">
                Welcome to the autogenerated homepage for Cookiecutter-Django: React Edition.
              </Typography>
              <Typography component="p">
                <Link to="/About">About</Link>
              </Typography>
              <Typography component="p">
                If you're building with <Typography className={classes.code}>yarn start</Typography>, you should be able to make changes and see them reflected here immediately.
              </Typography>
              <Typography component="p">
                If you're using chrome, you probably want to go into the network console and check "Disable cache".
              </Typography>
              <Typography component="p">
                Don't forget to check out <Typography className={classes.code}>yarn storybook</Typography>!
              </Typography>
              <Typography component="p">
                It's highly reccomended you test server-side rendering locally somewhat often. Instructions on how to do so are in the auto-generated <Typography className={classes.code}>readme.md</Typography>
              </Typography>
            </Paper>
          </Grid>
        
        <Grid item xs={12} sm={8} md={6} >
            <Paper className={classes.cardRoot} elevation={1}>
              <Typography variant="headline" component="h3">
                How to get started
              </Typography>
              <Typography component="p" paragraph={true}>
                This fie is located in <Typography className={classes.code}>{{cookiecutter.project_slug}}/{{cookiecutter.project_slug}}/src/javascript/components/homepage.js</Typography>
              </Typography>
              <Typography component="p" paragraph={true}>
                It is included by <Typography className={classes.code}>{{cookiecutter.project_slug}}/{{cookiecutter.project_slug}}/src/javascript/app.js</Typography>, which is where you should start looking if you want to start working on the frontend.
              </Typography>
              <Typography component="p" paragraph={true}>
                <Typography className={classes.code}>{{cookiecutter.project_slug}}/{{cookiecutter.project_slug}}/src/javascript/app.js</Typography> is included by <Typography className={classes.code}>{{cookiecutter.project_slug}}/{{cookiecutter.project_slug}}/src/javascript/root.js</Typography>, which is responsible for creating the Redux store and rendering our app.
              </Typography>
              <Typography component="p" paragraph={true}>
                In <Typography className={classes.code}>{{cookiecutter.project_slug}}/{{cookiecutter.project_slug}}/views.py</Typography>, you should see two classes, <Typography className={classes.code}>ReactView</Typography> and <Typography className={classes.code}>Index</Typography>. 
                <Typography className={classes.code}>ReactView</Typography> is an abstract base class which is designed to make it easy to extend but cover most use cases.
                It calls <Typography className={classes.code}>getRenderInfo()</Typography> which should return a <Typography className={classes.code}>RenderInfo</Typography> object (which is just a <Typography className={classes.code}>NamedTuple</Typography>).
                That object contains useful information like the location of the root component and the props you'd like to pass it. 
                The <Typography className={classes.code}>ReactView</Typography> then uses the information in that object to call the render server (which returns the rendered HTML and CSS), 
                adds an <Typography className={classes.code}>extra_data</Typography> property to your props (which contains useful data such as whether the root component is being rendered on the server or the client), and serves your app.
              </Typography>
              <Typography component="p" paragraph={true}>
                Important! By default, any props you add in your view will be used to populate Redux's initial state (see <Typography className={classes.code}>src/javascript/root.js</Typography>). This means you will need a reducer for any props you add, or they will be ignored.
              </Typography>
            </Paper>
        </Grid>
        <Grid item xs={12}>
          <Grid
            container
            className={classes.demo}
            justify="center"
            spacing={Number(16)}
          >
            <RandomNumberCard />
          </Grid>
        </Grid>
      </Grid>
      <Button
        variant="contained"
        color="primary"
        onClick={() => props.createCollection('yo')}
      >
        Hello World
      </Button>
    </div>
  );
}

const mapStateToProps = state => ({
  nonce: state.nonce 
});

const mapDispatchToProps = dispatch => ({
  setNonce: text => {
    dispatch(nonce.setNonce(text));
  }
});

Homepage.propTypes = {
  classes: PropTypes.object.isRequired
};

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(withStyles(styles)(Homepage));
